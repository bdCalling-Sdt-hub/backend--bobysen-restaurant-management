"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bookingRoutes = void 0;
const express_1 = require("express");
const auth_1 = __importDefault(require("../../middleware/auth"));
const user_constant_1 = require("../user/user.constant");
const booking_controller_1 = require("./booking.controller");
const router = (0, express_1.Router)();
router.post("/", (0, auth_1.default)(user_constant_1.USER_ROLE.user, user_constant_1.USER_ROLE.vendor, user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.bookAtable);
router.post("/event", (0, auth_1.default)(user_constant_1.USER_ROLE.user, user_constant_1.USER_ROLE.vendor, user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.bookAtableForEvent);
router.get("/admin", (0, auth_1.default)(user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.getAllBookingsForAdmin);
router.get("/statics", (0, auth_1.default)(user_constant_1.USER_ROLE.user, user_constant_1.USER_ROLE.vendor, user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.getBookingStatics);
router.get("/", (0, auth_1.default)(user_constant_1.USER_ROLE.user, user_constant_1.USER_ROLE.vendor, user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.getAllBooking);
router.get("/details/:id", (0, auth_1.default)(user_constant_1.USER_ROLE.user, user_constant_1.USER_ROLE.vendor, user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.getBookingDetailsWithMenu);
router.get("/event/:id", (0, auth_1.default)(user_constant_1.USER_ROLE.user, user_constant_1.USER_ROLE.vendor, user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.getSingleUnpaiEventBooking);
router.get("/owner", (0, auth_1.default)(user_constant_1.USER_ROLE.user, user_constant_1.USER_ROLE.vendor, user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.getAllBookingByOwner);
router.get("/:id", (0, auth_1.default)(user_constant_1.USER_ROLE.user, user_constant_1.USER_ROLE.vendor, user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.getSingleBooking);
router.patch("/:id", (0, auth_1.default)(user_constant_1.USER_ROLE.user, user_constant_1.USER_ROLE.vendor, user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.updatebooking);
router.delete("/:id", (0, auth_1.default)(user_constant_1.USER_ROLE.user, user_constant_1.USER_ROLE.vendor, user_constant_1.USER_ROLE.admin), booking_controller_1.bookingControllers.updatebooking);
exports.bookingRoutes = router;
